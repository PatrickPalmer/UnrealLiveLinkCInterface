
cmake_minimum_required(VERSION 3.30)

project(pyUnrealLiveLink)

set(CMAKE_POSITION_INDEPENDENT_CODE ON)

set(CMAKE_CXX_STANDARD 20)

if(NOT DEFINED PYTHON_MODULE_VERSION)
    set(PYTHON_MODULE_VERSION 3.11)
ENDIF()

if(DEFINED PYTHON_MODULE_VERSION AND NOT "${PYTHON_MODULE_VERSION}" STREQUAL "")
    set(PYTHON_MODULE_VERSION_EXACT "EXACT")
ENDIF()

message("Looking for Python v${PYTHON_MODULE_VERSION}")
find_package(Python ${PYTHON_MODULE_VERSION} ${PYTHON_MODULE_VERSION_EXACT} COMPONENTS Interpreter Development)
IF (NOT Python_FOUND)
    message("WARNING: Unable to build Python module. Skipping.")
    RETURN()
ENDIF()

message("Python executable found here: " ${Python_EXECUTABLE})
include_directories( ${Python_INCLUDE_DIRS} )

SET(PYBIND11_NOPYTHON ON)
SET(PYBIND11_FINDPYTHON OFF)
add_subdirectory(pybind11)
#FIND_PACKAGE(PyBind REQUIRED)

include_directories(${PYBIND11_INCLUDE_DIR})


INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../lib
	${CMAKE_CURRENT_SOURCE_DIR}/../include
	${CMAKE_CURRENT_SOURCE_DIR}/../src
	${CMAKE_CURRENT_BINARY_DIR}/..)

add_library(${PROJECT_NAME} SHARED module.cpp)

TARGET_LINK_LIBRARIES(${PROJECT_NAME} UnrealLiveLinkCInterfaceAPI ${Python_LIBRARIES})

if (WIN32)
    set_target_properties(${PROJECT_NAME} 
        PROPERTIES 
            COMPILE_FLAGS "/Zc:wchar_t-"
            SUFFIX ".pyd"
    )
endif(WIN32)

set_target_properties(${PROJECT_NAME} PROPERTIES PREFIX "")

STRING(REPLACE "." "" PYDIR_NAME "py${Python_VERSION}")
 
install(TARGETS ${PROJECT_NAME} DESTINATION ${CMAKE_INSTALL_PREFIX}/python/${PYDIR_NAME}/${PROJECT_NAME})


